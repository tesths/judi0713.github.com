<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testHs</title>
    <description>我想回馈iOS开发这个大社区，所以我决定写博客。 写的不好，还请见谅。
</description>
    <link>http://walkginkgo.com/</link>
    <atom:link href="http://walkginkgo.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Apr 2021 22:46:21 +0800</pubDate>
    <lastBuildDate>Tue, 06 Apr 2021 22:46:21 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>2020 年的总结</title>
        <description>&lt;p&gt;上大学的时候每年都会写个总结，自从毕业回家之后再也没写过。从今年开始重新开写吧。&lt;/p&gt;

&lt;h2 id=&quot;工作&quot;&gt;工作&lt;/h2&gt;

&lt;p&gt;大部分人的总结都会着重总结下自己的工作，我的工作实在没啥好总结的。工作对我来说，就是混口饭吃，我不止一次思考过现在这个工作对我的意义，实在也想不出来这份工作能带给我多大的意义，这种感觉在今年更为强烈。&lt;/p&gt;

&lt;p&gt;我曾经看到很多人说一定要把握住自己上班的时间，我想说的是，有的班是这样，有的班不是，如果一个工作有着肉眼可见的天花板，有着肉眼可见的缺陷，我想这个工作是没有把握的必要。我经常思考这份工作给我的意义，最后的结论是这份工作可以让我有收入来做我想做的事情，让我的生活可以规律一点，其他我也实在想不出来什么。关于工作这个事在最后这个月实在思考了很多，得出的结论是我 2021 我想换了。&lt;/p&gt;

&lt;p&gt;想换的念头年年都有，今年尤为强烈。我不知道我还会干多久，总之想再在这个单位有所成长，会有，但也不会有多大的突破。我也有问题，但我认为这是多方面因素的结果。&lt;/p&gt;

&lt;p&gt;其他关于工作想说的就是，因为这份工作，我经历了很多无法想象的事情，比如年初去小区门口执勤，比如差点去抗洪，该经历的都经历了，不想经历的也经历了。虽然有着很多不情愿，可这些不情愿带给我了很多意想不到的收获，这也算苦中作乐了。&lt;/p&gt;

&lt;p&gt;对于这个工作我想说的是，如果钱给不够，那就要靠人的自我驱动，如果一个人不想做，那你怎么讲怎么骂，驱动的效果都是有限的。&lt;/p&gt;

&lt;p&gt;最后关于这个工作，我想感谢这份工作在疫情的时候可以让我有个正当理由可以出来，然后去给小妹妹送了吃的和口罩，我也感谢这份工作前段时间让我出差得以从外地给小妹妹买了吃的。只要这个工作让我顺便能给小妹妹送点东西的地方，我都很感谢。&lt;/p&gt;

&lt;p&gt;对这份工作的总结就是我对这份工作的态度，干一天是一天，敷衍一天是一天。以上，关于工作的总结到此为止。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下面是正儿八经我想总结的。&lt;/p&gt;

&lt;h2 id=&quot;个人健康&quot;&gt;个人健康&lt;/h2&gt;

&lt;p&gt;今年的胃依然不太好，疫情在家瘦了二十多斤，不过经历了疫情我也彻底发现了我的胃不舒服和我的状态是完全正相关的。一旦我熬夜，第二天我的胃就会难受。&lt;/p&gt;

&lt;p&gt;今年4月去做了胃镜，又是啥事没有，狠下心喝了快2个月的中药无果，决定自己调节。之后就是开始坚持冥想，今年冥想带给我很大的改变。以前我总说自己焦虑，现在也焦虑，但现在好了很多。&lt;/p&gt;

&lt;p&gt;当我可以进入冥想状态的时候我会感到很舒服，睡眠也好，胃也好，但我一旦无法进入状态，就会很难受。&lt;/p&gt;

&lt;p&gt;我一切感到不舒服的源头，包括我的胃问题的根源，其实我自己也很清楚，就是经常处于高度紧张的状态无法松弛下来。这个不是一天两天可以解决的难题，吃了一段时间西药没啥效果，前几天又开了中药，希望可以有所好转，我慢慢再调节吧。&lt;/p&gt;

&lt;p&gt;还好的是今年都又在坚持锻炼，基本有空的时候都会去打个篮球。关于这个篮球我要再多说几句，今年球技并没有什么提升，不过在打篮球的时候也越发清楚的看到自己的问题，我向这是以前都没有过的。希望明年球技可以再提升吧。&lt;/p&gt;

&lt;h2 id=&quot;感情&quot;&gt;感情&lt;/h2&gt;

&lt;p&gt;自从去年11月？大概。从那之后我好像并无太大的新目标。我自己对于感情的感受就是，浪了太久，突然发现最好的就在身边，即使我可能永远得不到，我也不愿意去找其他人了。&lt;/p&gt;

&lt;p&gt;年初的时候我就决定取消一切相亲活动，目前看来实践的挺好。&lt;/p&gt;

&lt;p&gt;今年给小妹妹送了口罩，买了蛋糕，七七八八带了点东西。七夕左右的时候把我自己缝的香包给她送去了，没说是我缝的，就说是单位搞活动发的。这大概是我印象最深的一次。&lt;/p&gt;

&lt;p&gt;很多人说我坚持是徒劳，是执念，是自我感动。但我觉得在这个事情上我想的挺清楚的，我从一开始就做好了不可能的心理准备。这是我那么多年不珍惜身边人应得的报应，所以我都可以接受。&lt;/p&gt;

&lt;p&gt;至于可能性我也觉得不高，不高不代表我不会努力，不会继续思考新的解决方案。&lt;/p&gt;

&lt;p&gt;经历了那么多小姑娘，最后发现记忆力竟然有这么个人这些年一直印象都挺好。这事是我一直觉得最有意思的地方，我只能说无论结果如何，我现在的选择一点点都不后悔。&lt;/p&gt;

&lt;p&gt;如此毅然决然的心里只有一个姑娘的情况，那么多年好像是第一次。&lt;/p&gt;

&lt;h2 id=&quot;家庭&quot;&gt;家庭&lt;/h2&gt;

&lt;p&gt;家庭只能说勉强。老巨经常出去玩，这事挺好。我妈最近身体也不太好，但也能勉强过日子。&lt;/p&gt;

&lt;p&gt;奶奶和姥姥也还行。&lt;/p&gt;

&lt;p&gt;有些事也不能多说。&lt;/p&gt;

&lt;p&gt;我只想说过一天是一天吧，无甚要求。&lt;/p&gt;

&lt;h2 id=&quot;理财&quot;&gt;理财&lt;/h2&gt;

&lt;p&gt;在这上面小挣了一笔，也越发清楚自己现在投资的问题。&lt;/p&gt;

&lt;p&gt;今年学会了网格交易，但是购买的品种太多。之前买的不合理存在更加合理的配置方案。我也在今年开始坚定的购买指数作为我的投资手段。&lt;/p&gt;

&lt;p&gt;好在今年受益是正的，正了2个月的工资。&lt;/p&gt;

&lt;p&gt;不过最大的收获是因为理财这件事我开始意识到，不怕没机会，怕的是机会来了你把握不住。&lt;/p&gt;

&lt;p&gt;理财这件事不光是为了挣钱，从理财的过程中不断看到新的底层原理才是这件事最大的意义。&lt;/p&gt;

&lt;h2 id=&quot;副业&quot;&gt;副业&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;我的 App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;昨晚在回忆今年的时候才发现，我今年一个新的 App 都没做，所以我今年到底在干嘛呢…&lt;/p&gt;

&lt;p&gt;之前做的压制软件终于在今年实现了盈利，虽然不多，但这是个好的信号，我相信明年我会挣的更多。我也越发认识到，开发 App 有着天然的流量问题，所以我今年也在解决流量问题。&lt;/p&gt;

&lt;p&gt;好在今年的 App 盈利了，盈利了就好。盈利了就可以堵上很多人的嘴，盈利了就可以持续的做这件事。日子还很长，我相信会有好的结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我的内容&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我想把除了 App 以外所有的东西都放在内容上。今年最后的几个月我开始了日更，我开始把之前的流量导入到我的公众号。目前有 1700 个粉丝，虽然这些人也不咋看我这个破号。不过没关系，我现在有了冷启动的流量。这就是我最大的资本。&lt;/p&gt;

&lt;p&gt;我还写了4篇科普内容，这4篇科普内容的价值在我看来是我明年最大的资本。&lt;/p&gt;

&lt;p&gt;我也越发确定我的副业就两件事，一是开发App，二是做好的计算机科普内容。想明白这点还是在去当伴郎的路上。想明白就好。&lt;/p&gt;

&lt;p&gt;今年最大的痛苦依然是陷入了没有好想法的困境，不知道为什么。希望明年可以爆发一些灵感吧。&lt;/p&gt;

&lt;p&gt;今年的副业完全实现了收入，理财也好，开发软件也好，甚至写破公众号都实现了收入。还是那句话，不多，但是有，这就是最大的资本。这也是我2020年最大的收获。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;2020虽然很难，但我肉眼可见的看到了自己的成长。钱也好，思考也好，我都明明确确的看到了，感受到了。我也越发明确我想做的事情，我以后想成为的样子。如果要给我的2020打个分，我会打5分。剩下5分，每年1分，在30岁的时候我想满分。&lt;/p&gt;

&lt;p&gt;今年我真的很满意了，可惜我的胃口很大，我还不够满足。毕业之后我试图隐藏，可我无法把自己内心的心高气傲给掩饰了。如果不是这种心高气傲，我本该就此停止。我想说的是，不好意思我确实实力比一般人要强。我想做的事我很快就会实现。我知道很多人会等着打我的脸，我不怕，给我点时间，让我来证名。&lt;/p&gt;

&lt;p&gt;关于2020想说的太多，就此打住也许是最好的选择。一如我几年前写年终总结的最后都会写的。&lt;/p&gt;

&lt;p&gt;感谢各位，感谢我的家人，同事，感谢我的小伙伴们，感谢我爱的人和爱我的人。&lt;/p&gt;

&lt;p&gt;感谢不开心的事，也感谢开心的事，这些都将成为我以后的财富。&lt;/p&gt;

&lt;p&gt;各种感谢！深鞠躬！爱你们！&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/2020/12/31/conclusion.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/2020/12/31/conclusion.html</guid>
        
        
      </item>
    
      <item>
        <title>快捷指令下载 Instagram 图像及 Story（7.10 更新）</title>
        <description>&lt;h2 id=&quot;710-更新&quot;&gt;7.10 更新&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;目前只需要在捷径最前面填写即可。详情见图！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;62-更新&quot;&gt;6.2 更新&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;Story 下载两个地方都需要增加 Cookie 啦，见截图。&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;524-更新&quot;&gt;5.24 更新&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Instagram 单独下载一条也需要登录了，单独下载一条设置 Cookie 的方式同 Story。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在查询了一些资料之后，我找到了 Instagram Story 的下载方式，并根据这个方式完成了 Workflow 的版本。感谢 &lt;a href=&quot;https://github.com/tensojka/instastories-backup&quot;&gt;instastories-backup&lt;/a&gt;项目。&lt;/p&gt;

&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;

&lt;p&gt;Instagram 是需要登录验证的，但实际经过我的测试，Instagram 只会检测 cookie 和 user-agent。那么只要在网络请求的 headers 加入 cookie 和 user-agent 实际上就可以了。&lt;/p&gt;

&lt;p&gt;user-agent 是可以直接伪造的，而 cookie 值，需要通过网络版本的 chrome 获取。&lt;/p&gt;

&lt;p&gt;在这个地方，cookie 建议使用自己的，或者是专门注册一个帐号用于下载。如果 cookie 泄露，理论上可以利用 cookie 对相应的用户进行数据篡改。&lt;/p&gt;

&lt;h2 id=&quot;获取-cookie&quot;&gt;获取 cookie&lt;/h2&gt;

&lt;p&gt;打开 Chrome，进入到 www.instagram.com 并登录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows 用户按 f12，Mac 用户按 option+cmd+j，打开控制台。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;此时刷新页面，找到 www.instagram.com 的请求。找到 cookie，然后找到 sessionid。复制这串 140122… （这串数字+字母+符号，每个人不同，有人可能是 5124…等）如图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ins/ins0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后把这么一长串，粘贴到捷径中最开始的 sessionid= 后面即可进行下载操作。&lt;/p&gt;

&lt;h3 id=&quot;普通下载版本截图&quot;&gt;普通下载版本截图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ins/ins2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;story-版本下载截图&quot;&gt;Story 版本下载截图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ins/ins3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;注意事项&quot;&gt;注意事项&lt;/h2&gt;

&lt;p&gt;cookie 一定不能泄漏，不然会造成安全问题。&lt;/p&gt;

&lt;p&gt;每个 cookie 的有效期是 90 天，需要时常更新。&lt;/p&gt;

&lt;p&gt;这里通过的是 Instagram 的私有 API 进行操作，所以 workflow 单人单用以免出现滥用。&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/ins/2018/08/06/ins.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ins/2018/08/06/ins.html</guid>
        
        
        <category>ins</category>
        
      </item>
    
      <item>
        <title>松果压制上架 Mac App Store 及沙盒机制的部分说明</title>
        <description>&lt;p&gt;距离上次写博客过去了一个月。这一个月经历了挣扎的上架 MAS。还好我没放弃，终于在昨天上架了 MAS。&lt;/p&gt;

&lt;p&gt;我将凭借我的记忆来叙述这个上架过程中一些对于沙盒机制的理解。以及整个上线过程中存在的坑。&lt;/p&gt;

&lt;h2 id=&quot;第三方-executable-file-的签名&quot;&gt;第三方 executable file 的签名&lt;/h2&gt;

&lt;p&gt;上文提到，我在整个软件的压制过程中，使用的是 ffmpeg 官网的可执行文件压制。而像 Mac 上著名的 INNA 是采用的 ffmpeg 的 .h 头文件 + 部分 objective-c 代码来实现部分和 ffmpeg 相关的代码。&lt;/p&gt;

&lt;p&gt;我承认我不是一个好的工程师，我也承认我觉得使用 ffmpeg 的 c 文件进行二次开发是更好的选择。但是如果我把我的精力放在研究 c 代码上，那这个工程量对于我来说太大，以及我觉得直接使用 ffmpeg 并不是不可以。&lt;/p&gt;

&lt;p&gt;那么采用 ffmpeg 可执行文件作为我们的主要工具，就有一个很重要的问题，那就是 ffmpeg 的签名问题。MAS 版本的所有文件都要求进行签名，我第一次无法上传到 MAS 的问题就是 ffmpeg 没有签名。这里的签名就直接使用 codesign 签名是可以的。除此之外，对于 ffmpeg 要求有一个单独的 entitlement 文件，而这个文件里面应该填写的是&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;com.apple.security.inherit&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
	&amp;lt;key&amp;gt;com.apple.security.app-sandbox&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在签名的使用 codesign 和 entitlement 签名。&lt;/p&gt;

&lt;p&gt;这就完成了第一步，对于第三方可执行文件的签名，如果这个地方没有签名，连上传到 MAS 都是会被阻碍的。&lt;/p&gt;

&lt;h2 id=&quot;如何理解沙盒机制&quot;&gt;如何理解沙盒机制&lt;/h2&gt;

&lt;p&gt;我将用五次被拒绝的经历来说明我对沙盒机制的理解。&lt;/p&gt;

&lt;h3 id=&quot;第-0-次被拒构建版本不显示图标&quot;&gt;第 0 次被拒（构建版本不显示图标）&lt;/h3&gt;

&lt;p&gt;在我完成第一次上传之后，我的构建版本处一直不显示图标，这和之前的情况是不一样的。这个地方的坑在于可以使用构建版本，但是就是不显示图标…因为我之前经历过不显示图标的问题，最终联系了苹果客服才知道调用了私有 API，但是这次确实是一切正常，就是不显示图标。这个坑经历的时间最长，让我一直觉得是我调用了不该调用的接口。&lt;/p&gt;

&lt;h3 id=&quot;第-1-次被拒-7月7日&quot;&gt;第 1 次被拒 7月7日&lt;/h3&gt;

&lt;p&gt;提交苹果审核之后，我的第一次拒绝在 7.7 这一天出现了。&lt;/p&gt;

&lt;p&gt;主要问题如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/mas/1.png&quot; alt=&quot;mas-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了可以让搜索引擎更好的搜索到相同的问题，我把文字版本的关键部分贴出来&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specifically, we found that when the user closes the main application window there is no menu item to re-open it.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第一个问题好解决，不支持 MOV 的问题，我在 drag and drop 里增加一个判断就解决了。这个 window reopen 的问题我开始着手解决。&lt;/p&gt;

&lt;p&gt;在苹果的 Human Interface Guidelines 里是可以使用点击 Dock 图标来打开的，于是我增加了点击 Dock 图标的方法。&lt;/p&gt;

&lt;p&gt;于此我的两个问题全部解决，重新提交审核。&lt;/p&gt;

&lt;h3 id=&quot;第-2-次被拒-7月9日&quot;&gt;第 2 次被拒 7月9日&lt;/h3&gt;

&lt;p&gt;主要问题如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/mas/2.png&quot; alt=&quot;mas-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/mas/3.png&quot; alt=&quot;mas-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一个和第二个问题的关键部分&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.files.downloads.read-write&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.files.user-selected.executable&lt;/code&gt; 这两个 entitlement 文件的声明。&lt;/p&gt;

&lt;p&gt;第三个还是 re-open window 的问题。&lt;/p&gt;

&lt;p&gt;我认为 Download 文件夹是可以随意使用的，而且我已经可以点击 Dock 打开了。于是向苹果方发了一个回执。&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The download folder is the default folder to save the compressed video. So I need the download folder to write permission. And I think the right folder path is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/username/Downloads&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The reopening event is resolved by add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makeKeyAndOrderFront&lt;/code&gt; in Appdelegate. If the user closes the window, he can reopen it by click docker icon. And I already test it.
`&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后苹果给我了一个详细的回复&lt;/p&gt;

&lt;p&gt;`
The Downloads folder is only appropriate for items downloaded from the Internet.
Additionally, clicking the Dock icon is an insufficient means of restoring the Main Window. We advise implementing a menu item.
We look forward to reviewing your revised binary.
`&lt;/p&gt;

&lt;p&gt;Download 文件夹的使用权，只有当具备下载功能的时候才可以使用。而苹果认为，单个窗口的应用，点击 Dock 是一个没效率的打开操作，建议使用快捷键打开。&lt;/p&gt;

&lt;p&gt;于是在这个地方，我把 Download 文件夹换成了 Movie 文件夹，然后参考了 CurrencyX 的方案，在 Menu 里加了一个快捷键启动窗口的方法。重新提交审核。&lt;/p&gt;

&lt;h3 id=&quot;第-3-次被拒-7月11日&quot;&gt;第 3 次被拒 7月11日&lt;/h3&gt;

&lt;p&gt;主要问题如下图。&lt;/p&gt;

&lt;p&gt;第一个和第二个问题的关键部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/mas/4.png&quot; alt=&quot;mas-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关键字&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.files.user-selected.executable&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.assets.movies.read-write: Yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我依然没有解决 executable 的问题，以及在苹果看来 movies 也是不可以被读写的。&lt;/p&gt;

&lt;p&gt;我删除了 entitlement 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.files.user-selected.executable&lt;/code&gt;。重新提交审核。&lt;/p&gt;

&lt;h3 id=&quot;第-4-次被拒-7月11日&quot;&gt;第 4 次被拒 7月11日&lt;/h3&gt;

&lt;p&gt;主要问题如下图。&lt;/p&gt;

&lt;p&gt;第一个和第二个问题的关键部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/mas/5.png&quot; alt=&quot;mas-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关键字&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.assets.movies.read-write: Yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在这个地方我将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.assets.movies.read-write&lt;/code&gt; 删除，然后将压制文件的默认文件夹放在了沙盒里的 cache 文件夹。&lt;/p&gt;

&lt;h3 id=&quot;第-5-次被拒-7月13日&quot;&gt;第 5 次被拒 7月13日&lt;/h3&gt;

&lt;p&gt;主要问题如下图。&lt;/p&gt;

&lt;p&gt;问题关键部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/mas/6.png&quot; alt=&quot;mas-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关键字&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Your app saves user data to the app's container, which is not user accessible, as documented in the &quot;Container Directories and File System Access&quot; of App Sandbox Design Guide:
&quot;The container is in a hidden location, and so users do not interact with it directly. Specifically, the container is not for user documents. It is for files that your app uses, along with databases, caches, and other app-specific data.&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;于是在这个地方，我把存储位置设置为一个 NSOpenPanel，让用户选择存储位置，重新提交审核。&lt;/p&gt;

&lt;p&gt;终于审核通过。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;我们来复盘整个过程。总的来说是对 MAS 的沙盒机制理解不清楚。下面我将总结及说明。&lt;/p&gt;

&lt;p&gt;首先我们先说沙盒无关的，就是苹果认为，我们应该在 menubar 设置一个可以打开窗口的方案。或者你就直接把它关掉。&lt;/p&gt;

&lt;p&gt;其次是沙盒问题，在 MAS 的沙盒机制中，Download 文件夹和 Movie 文件夹是不可以被随意使用的，Download 文件夹只有下载功能才可以，而如果使用了 Movie 文件，那么 iTunes 的 movie 也是可以被使用的。（第 2 次和第 3 次和第 4 次被拒绝的原因）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.files.user-selected.executable&lt;/code&gt; 这个是只有当你的应用需要创建可执行文件，这个可执行文件用于启动服务等的时候才能使用。（第 2 次和第 3 次和第 4 次被拒绝的原因）&lt;/p&gt;

&lt;p&gt;沙盒内部的文件，只能被写，不能被用户读取。（第 5 次被拒绝的理由）&lt;/p&gt;

&lt;p&gt;还有一个关键的问题在于，MAS 沙盒默认会获得你从 NSOpenPanel 读取的那个文件夹的权限，而 Drag 和 Recent 的是沙盒获得了操作这个文件的权限，而不是文件夹！&lt;/p&gt;

&lt;p&gt;所以当我使用 Drag and Drop 的时候是无法写文件的，而当我使用 NSOpenPanel 时候就可以。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;PineconeSuppress 已经上架 MAS。地址是 &lt;a href=&quot;https://itunes.apple.com/cn/app/pineconesuppress/id1398134175?l=zh&amp;amp;ls=1&amp;amp;mt=12&quot;&gt;PineconeSuppress&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;同时开发计划将逐步开放在 &lt;a href=&quot;https://trello.com/b/whpNOtsG/pineconesuppress&quot;&gt;trello&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如果有任何问题，欢迎留言。&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11821632/mac-os-app-sandbox-with-command-line-tool&quot;&gt;mac-os-app-sandbox-with-command-line-tool&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://xujiwei.com/blog/2013/02/embed-third-party-binary-in-sandboxed-mac-app/&quot;&gt;在 Sandboxed Mac App 中嵌入第三方可执行文件&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html&quot;&gt;App Sandbox in Depth&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html&quot;&gt;Enabling App Sandbox&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 15 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/ffmpeg/2018/07/15/MAS-sanbox.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ffmpeg/2018/07/15/MAS-sanbox.html</guid>
        
        
        <category>ffmpeg</category>
        
      </item>
    
      <item>
        <title>Cocoa 封装 ffmpeg</title>
        <description>&lt;p&gt;上次写完推文之后发现压制还是很麻烦，转念一想，要么自己做一个 GUI 的吧，于是有了将近三星期零零散散的开发。&lt;/p&gt;

&lt;p&gt;下面把我开发的过程记录下。&lt;/p&gt;

&lt;h2 id=&quot;如何使用-ffmpeg&quot;&gt;如何使用 ffmpeg&lt;/h2&gt;

&lt;p&gt;在 iOS 开发中，ffmpeg 是使用编译过的文件进行开发。而在 Mac 中，我查阅了一部分资料，（可能是我花的时间太少），最后查询的结果是直接使用可执行文件。&lt;/p&gt;

&lt;p&gt;这里就很简单了，直接把 ffmpeg 拖进工程，然后使用 nstask 来调用就可以了。&lt;/p&gt;

&lt;h2 id=&quot;drag-and-drop&quot;&gt;drag and drop&lt;/h2&gt;

&lt;p&gt;drag and drop 是这种程序标配的了。好在 drag and drop 有很多学习资料。文章最后会放上我查阅的一些资料。&lt;/p&gt;

&lt;h2 id=&quot;小细节&quot;&gt;小细节&lt;/h2&gt;

&lt;p&gt;有很多小坑是我整个过程中踩的，比如 NSButton 的文字居中。比如 nstask 的暂停。我使用了别人的代码，但是发现变量初始化有问题。排查了半天。&lt;/p&gt;

&lt;h2 id=&quot;开源&quot;&gt;开源&lt;/h2&gt;

&lt;p&gt;根据我的预期，这个项目是会开源的…但不是在现在。大概我测试写完会开源出去。所以多的就不写了。反正这个代码写的也不咋样，但是效果还凑合！&lt;/p&gt;

&lt;p&gt;就这。&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/136272/drag-and-drop-tutorial-for-macos&quot;&gt;Drag and Drop Tutorial for macOS&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/125071/nstask-tutorial-os-x&quot;&gt;NSTask Tutorial for OS X&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/29233247/implementing-a-drag-and-drop-zone-in-swift&quot;&gt;Implementing a drag-and-drop zone in Swift&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/onmyway133/YoutubeDownloader&quot;&gt;YoutubeDownloader&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 12 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/ffmpeg/2018/06/12/cocoa-ffmpeg.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ffmpeg/2018/06/12/cocoa-ffmpeg.html</guid>
        
        
        <category>ffmpeg</category>
        
      </item>
    
      <item>
        <title>Mac 下压制字幕和 logo</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文将不定期补充 ffmpeg 其余压制方案或者命令行使用方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;如果有在 Mac 下压制字幕需求的话，可以直接在 Mac App Store 搜索 &lt;a href=&quot;https://apps.apple.com/cn/app/pineconesuppress/id1398134175?l=en&amp;amp;mt=12&quot;&gt;PineconeSuppress&lt;/a&gt;。我将 ffmpeg 进行了可视化的封装，可以更加轻松的在 Mac 下压制字幕哦~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这篇博客要感谢蒸包同志！没有蒸包同志的教学就没有这篇博客的输出。以及，要说难确实也有点难度，要说不难，我真的很努力写的白话文加配图了。以及如果需求大我会开发 Mac 可视化版本的压制软件…这是后话。&lt;/p&gt;

&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;

&lt;p&gt;大部分字幕组做视频压制，标准配备都是 Windows 版本的小丸工具箱。但是小丸工具箱的 Mac 版本没有 Windows 那么好。其次的问题是怎么 Mac 怎么打 logo。在我们组内使用 Aegisub 打 logo。使用 Aegisub 打 logo 的话，需要给 Aegisub 安装 vsflitermod 插件，这玩意没有 Mac 的。最后的问题是，Mac 下没有好的压制工具。&lt;/p&gt;

&lt;h2 id=&quot;工具问题&quot;&gt;工具问题&lt;/h2&gt;

&lt;p&gt;小丸实际上是针对 ffmpeg 进行了图像化的封装。那么原理上我们只要会 ffmpeg 就可以在 Mac 上达到相同的功能。而 Mac 下没有很好的 ffmpeg 的图形化客户端。那没办法，只有用命令行了。（如果需求量大我考虑下自己开发一个图形化的，但是目前还不会）&lt;/p&gt;

&lt;h2 id=&quot;预备&quot;&gt;预备&lt;/h2&gt;

&lt;p&gt;首先需要下载一个 ffmpeg 在 Mac 下的可执行文件。&lt;a href=&quot;https://evermeet.cx/ffmpeg/&quot;&gt;https://evermeet.cx/ffmpeg/&lt;/a&gt; 这个是 ffmpeg 官网跳转的链接。下载右下角的（其实都可以）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/1.png&quot; alt=&quot;ffmpeg-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后解压缩文件，会得到一个下图这样黑黑的东西。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/2.png&quot; alt=&quot;ffmpeg-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我的建议是建一个单独的文件夹。把这个 ffmpeg 放进去。然后的话就需要一点点计算机的知识了…没有很难，我也会尽量阐述的可以理解一点，而且全部配图。我也基本保证就这一点点专业性的东西。&lt;/p&gt;

&lt;p&gt;首先在电脑里找到 Terminal。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/3.png&quot; alt=&quot;ffmpeg-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时候要看下 ffmpeg 在哪个文件夹，比如我的 ffmpeg 在 Document 下的 ffmpeg 里。那么就输入命令，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd Documents/ffmpeg/&lt;/code&gt;。cd 的意思就是进入某个文件夹的意思。我们这里就是进入了 ffmpeg 的文件夹&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/4.png&quot; alt=&quot;ffmpeg-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个时候再输入一个命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;。ls 的意思是显示这个文件夹下所有的文件。可以看我的配图。到这步在 Terminal 看到有 ffmpeg 就可以了。然后点这个 &lt;a href=&quot;http://walkginkgo.com/images/ffmpeg/render.sh&quot;&gt;render.sh&lt;/a&gt;网页，就会自动下载一个文件，将这个文件放到和 ffmpeg 一个文件夹就可以啦。如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/5.png&quot; alt=&quot;ffmpeg-5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用&quot;&gt;使用&lt;/h2&gt;

&lt;p&gt;使用方案，需要用哪一个方法，就把最前面的 # 号去掉。中文那行不能注释。&lt;strong&gt;以及记得把视频 ass 还有 logo 的图都和那个黑色的 ffmpeg 放在一起。&lt;/strong&gt;下文有详细图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/14.png&quot; alt=&quot;ffmpeg-14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把需要的方案注释之后，在 Terminal 里运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash render.sh&lt;/code&gt;。就会开始压制了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/15.png&quot; alt=&quot;ffmpeg-15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/16.png&quot; alt=&quot;ffmpeg-16&quot; /&gt;
render.sh 里定义了几个方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.转换视频格式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把 in 改成你的视频名字，out 改成输出的视频名称即可。&lt;/p&gt;

&lt;p&gt;比如我想把 wake.mp4 换成 mkv。就改为。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./ffmpeg -i &quot;wake1.mp4&quot; wake.mkv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/6.png&quot; alt=&quot;ffmpeg-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.压制 srt 字幕&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把 in.mp4 换成你的 mp4，把 xx.srt 换成你的 srt 文件，out.mp4 换成你需要的名字。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.压制 ass 字幕&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把 in.mp4 换成你的 mp4&lt;/p&gt;

&lt;p&gt;把 xx.srt 换成你的 ass 文件&lt;/p&gt;

&lt;p&gt;out.mp4 换成你需要的名字。如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/8.png&quot; alt=&quot;ffmpeg-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;压制完成后就会是。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/9.png&quot; alt=&quot;ffmpeg-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.压制带 logo 的（logo 在上 ass 字幕在下）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里的 logo 在上 ass 在下，是指如果 logo 和滚轴重复在一起，哪一个在上面。&lt;/strong&gt;下文有反着的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/10.png&quot; alt=&quot;ffmpeg-10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于我上文提到的，Mac 下的 Aegisub 插件是没有的，那我们可以利用 ffmpeg 来压制。将 logo 文件放在 ffmpeg 文件夹下。&lt;/p&gt;

&lt;p&gt;wakemeup1.mp4 换成你的 mp4 文件名&lt;/p&gt;

&lt;p&gt;logo-small.png 换成你的 logo 图片&lt;/p&gt;

&lt;p&gt;wakemeup1.ass 换成你的 ass 文件&lt;/p&gt;

&lt;p&gt;overlay=1060:70 这里的 1060:70 是距离屏幕左边 1060 的位置，距离屏幕上面 70 的位置。可以在 Aegisub 确定好在填写。可以参考 &lt;a href=&quot;http://tieba.baidu.com/p/2706704635&quot;&gt;如何在ASS字幕中插入各种图片&lt;/a&gt;，里面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{\p1\1img\bord0\shad0\(logo-small.png\pos(1123,166.99)}m 0 0 l 0 120 l 240 120 l 240 0&lt;/code&gt; 方案。先确定 logo 位置，填写到这里。&lt;/p&gt;

&lt;p&gt;直接在 Aegisub 上比对下也行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/12.png&quot; alt=&quot;ffmpeg-12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.压制带 logo 的（ass 字幕在上 logo 在下）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;同上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.压制延迟出现 logo 的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大部分同上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/ffmpeg/13.png&quot; alt=&quot;ffmpeg-13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;出现时间修改。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable='between(t,35,6*60+30)'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我现在想从第 10 秒到最后，假设影片长度 120 秒。那么修改 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable='between(t,10,120)'&lt;/code&gt;。即修改两个数字即可。&lt;/p&gt;

&lt;p&gt;总结一下就是。准备需要的 mp4，ass，logo，然后修改 render.sh 文件。以及在 Terminal 运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash render.sh&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;注意事项&quot;&gt;注意事项&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;render.sh 文件中如果多行的话，多行都需要注释，如我的图。&lt;/li&gt;
  &lt;li&gt;需要使用哪个则把前面的 # 去掉，其他的还得用 # 弄上。&lt;/li&gt;
  &lt;li&gt;如果使用中遇到错误请发邮件给我，虽然我不一定可以解决，但是可以试试看。邮箱是 tesths@yahoo.com。&lt;/li&gt;
  &lt;li&gt;如果你有更好的方案也欢迎留言或者给我发邮件。&lt;/li&gt;
  &lt;li&gt;以及有什么不明白的，留言和发邮件都可以。&lt;/li&gt;
  &lt;li&gt;以及这一套是可以完全用在 Windows 上的。&lt;/li&gt;
  &lt;li&gt;以上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;以及，最重要的是，本篇是有版权的，但是可以随意转载…转载的时候著名 PineconeSanaChina。&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 21 May 2018 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/ffmpeg/2018/05/21/ffmpeg.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ffmpeg/2018/05/21/ffmpeg.html</guid>
        
        
        <category>ffmpeg</category>
        
      </item>
    
      <item>
        <title>微信小程序自定义字体</title>
        <description>&lt;p&gt;最近给单位在做小程序，中间需要使用自定义字体。稍微梳理下整个过程。&lt;/p&gt;

&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;在小程序中是可以使用 font-family 属性的，但是官方没有给出有哪些 font 是可以选用的，所以我们无法知道小程序到底可以支持哪些内置的字体。自定义字体就成为了一个问题。&lt;/p&gt;

&lt;p&gt;小程序本身不支持将字体拖进去，然后通过引用的方式来使用字体。即使可以，一个思源字体随便都 10MB，拖进去之后整个大小就超过了小程序的 2MB 限制。&lt;/p&gt;

&lt;p&gt;在网上查找之后还有一个方案，就是使用在线的 &lt;a href=&quot;https://transfonter.org/&quot;&gt;transfonter.org&lt;/a&gt; 将字体转换成 base64 的方式。有使用 base64 的方案，但是还是会超过大小。而且 &lt;a href=&quot;https://transfonter.org/&quot;&gt;transfonter.org&lt;/a&gt; 对字体的大小本身还存在限制。这就是很麻烦的一件事情。&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;那么如何解决呢？我这里提供两个方案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一是通过在线应用 url 的方式。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这种方案就是将字体文件存在文件服务器上，通过地址的方案引到小程序中，比如我下午使用的 http://o9791noio.bkt.clouddn.com/songti.TTF 这个网址，是七牛的，可以使用！而且这种方案在 &lt;a href=&quot;https://github.com/youzan/zanui-weapp&quot;&gt;zanui-weapp&lt;/a&gt; 的 issue 是有人提到的，链接是 &lt;a href=&quot;https://github.com/youzan/zanui-weapp/issues/101&quot;&gt;使用”单元格”时，icon无法使用&lt;/a&gt;，但是我在真机测试的时候不可以，没有具体排查。我觉得问题的原因有两个，一是网上有些资料说 iOS 必须使用 https，二还是最根本的字体大小的问题，如果字体太大，模拟器就会有错误提示，真机在最开始如果没有加载也会非常麻烦。总之这个方案目前是被我 pass 的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二就是下面我现在使用的我觉得合理的方案。上 &lt;a href=&quot;http://font-spider.org/&quot;&gt;字蛛&lt;/a&gt;。当然这个也不是最好的解决方案。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据我的需求，我需要的个性化字体都是写死了，就是不需要网络加载。那么就可以采用字蛛对字体进行压缩。字蛛会把 html 中用到的字进行提取和压缩，用不到的就 pass 掉。这样会给原来的 ttf 文件进行一个强力的压缩，比如我压缩之后整个 ttf 文件的大小就变成了 8kb。这个效果还是显而易见的，这个时候再采用 &lt;a href=&quot;https://transfonter.org/&quot;&gt;transfonter.org&lt;/a&gt; 将字体转换为 base64 就可以了。&lt;/p&gt;

&lt;h2 id=&quot;脑洞&quot;&gt;脑洞&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;那么假设一下一个情况，如果需要的是动态字体怎么办？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然我暂时还没有这个需求，我想到的方案是，首先后台会将专门的字体进行一个标记，那么在标记之后，使用 font-spider 将原字体进行压缩，再使用 url 获取的方式来动态加载，由于这个时候的字体文件很小，那么就不会有字体太大手机端加载不出来的情况。&lt;/p&gt;

&lt;p&gt;或者就是直接把常用字进行 base64 加密，就省去了网络获取的问题了。&lt;/p&gt;

&lt;p&gt;非常想知道青芒杂志咋弄的 哈哈。&lt;/p&gt;

</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/miniprogram/2018/05/14/miniprogram-font.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/miniprogram/2018/05/14/miniprogram-font.html</guid>
        
        
        <category>miniprogram</category>
        
      </item>
    
      <item>
        <title>Ruby Memory</title>
        <description>&lt;p&gt;layout: post
title:  查找 ruby 内存泄漏
date:   2018-5-9
categories: server
—&lt;/p&gt;

&lt;p&gt;本文没有深入探讨 ruby 的内存管理问题，本人水平有限，没有去深入看内存管理，而且我现在主要需要实现功能，这里只谈我是怎么解决问题的。&lt;/p&gt;

&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;提到内存泄漏，这是个非常麻烦以及难以解决的问题，ruby 是自动回收内存，不是像 c 一样手动回收，虽然大部分语言现在都是这样，但是这就导致一个非常麻烦的问题，内存泄漏怎么办。我在解决这个问题的时候心里是有阴影的，因为之前写过一个 swift 的图表动画，运行几次之后就变的特别卡。一直也没有找到原因，后来换了一种非常啰嗦的写法才解决。所以这次是心有余悸的。&lt;/p&gt;

&lt;p&gt;事情的起端是我写了一个定时爬取数据的 ruby 程序。基本思路是用 ruby 来调用 python 脚本。然后通过 ruby 的 activerecord 存入数据库。为什么不用 python 直接存数据非得用 ruby 绕一下的理由是，activerocord 很好用，以及我想熟悉 ruby 栈，最后是这样可以和我的服务器 activerecord 无缝对接上，所以就用 ruby 了。&lt;/p&gt;

&lt;p&gt;我的需求是每个整点的第 22 分钟时运行一次，这里使用了 ruby 的 &lt;a href=&quot;https://github.com/jmettraux/rufus-scheduler&quot;&gt;rufus-scheduler&lt;/a&gt;，在这个 gem 里有一个是调用 cron。但是问题在于，真的调用 cron 了吗？我没有看源代码，但是最终根据我内存泄漏的原因，我分析是没有的。起因就是，我把程序上传到服务器上，每次运行 3-4 天之后服务器就无法 ssh，但是可以 ping。查了一下觉得有可能是内存泄漏，于是开始了排查。&lt;/p&gt;

&lt;h2 id=&quot;排查&quot;&gt;排查&lt;/h2&gt;

&lt;p&gt;一开始我傻不拉唧直接在服务器上看内存使用。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.CPU占用最多的前10个进程： 
ps auxw|head -1;ps auxw|sort -rn -k3|head -10
2.内存消耗最多的前10个进程 
ps auxw|head -1;ps auxw|sort -rn -k4|head -10
3.虚拟内存使用最多的前10个进程
ps auxw|head -1;ps auxw|sort -rn -k5|head -10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我这里使用了第 2 个。但是这个方法是很傻的，因为你不可能每小时都登服务器，只能大概判断，不过我间隔了一段时间登录之后发现确实程序内存使用上升。于是切换到本地测试。&lt;/p&gt;

&lt;p&gt;我把定时任务换成了一个 while 循环，使用了一个函数&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def report
  p 'Memory ' + `ps ax -o pid,rss | grep -E &quot;^[[:space:]]*#{$$}&quot;`
          .strip.split.map(&amp;amp;:to_i)[1].to_s + 'KB'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个程序运行一段时间就会发现内存是在增长的，虽然当内存变大，ruby 的自动回收机制会让内存变小，但是总体还是在不断变大。&lt;/p&gt;

&lt;h2 id=&quot;解决&quot;&gt;解决&lt;/h2&gt;

&lt;p&gt;于是就需要开始排查到底是哪泄漏了。这里用到的 gem 是 &lt;a href=&quot;https://github.com/SamSaffron/memory_profiler&quot;&gt;memory_profiler&lt;/a&gt;。这里要注意，不能写成死循环检测，也不能循环次数太多检测，不然依然会导致内存使用过高。这是我遇到的坑。&lt;/p&gt;

&lt;p&gt;使用 memory_profiler 之后，它会显示 retain 的 object，超级神奇！还会显示内存泄漏的行数。我就不阐述了，非常直观明了。&lt;/p&gt;

&lt;p&gt;我的问题在于 ruby 调用 JSON 解析和 Time 的时候。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  allData = JSON.parse(result)
  current_time = Time.now.strftime(&quot;%H&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里实际上 allData 和 current_time 都已经是对象了。而 rufus-scheduler 并没有真正的调用 cron。所以导致每个小时都有 allData 和 current_time。即使内存回收，这个地方也是不会完全回收。&lt;/p&gt;

&lt;p&gt;解决方案很简单，加一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;= nil&lt;/code&gt; 就 ok。至少目前我修改过的程序已经运行 3 天内存依然比较稳定，希望一直稳定下去…&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;

</description>
        <pubDate>Wed, 09 May 2018 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/2018/05/09/ruby-memory.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/2018/05/09/ruby-memory.html</guid>
        
        
      </item>
    
      <item>
        <title>浅谈解决 Instagram 推送失效的问题</title>
        <description>&lt;p&gt;最近由于某些需要。需要关注 Instagram 的博主，ins 本身是提供了推送服务的，但是由于各种原因，经常收不到推送，这就需要自己采取爬虫的形式。&lt;/p&gt;

&lt;h2 id=&quot;推送服务&quot;&gt;推送服务&lt;/h2&gt;

&lt;p&gt;推送服务有很多选择，除了国内的平台都可以。我在这里采取了比较灵活的 telegram bot。tg 是一款很伟大的产品，很简单的方式就可以对接机器人自动发布消息。&lt;/p&gt;

&lt;p&gt;我采用了 &lt;a href=&quot;https://github.com/atipugin/telegram-bot-ruby&quot;&gt;telegram-bot-ruby&lt;/a&gt; 这个 gem，来将 ruby 脚本和 tg 联系起来。&lt;/p&gt;

&lt;p&gt;虽然我更推荐你们使用 python 或者 php，在 GitHub 上有很多和 ins 相关的 python 的库，甚至可以调用到 ins 私有的 api 接口。由于我最近的技术栈都是 ruby 所以就采用了 ruby。&lt;/p&gt;

&lt;h2 id=&quot;爬虫获取&quot;&gt;爬虫获取&lt;/h2&gt;

&lt;p&gt;ins 自身的网络请求是 api 分离的，这意味着如果爬虫爬取到了 json 接口之后可以直接获取 json 的数据。只需要在所有的 url 后面加上 ?__a=1 即可获得 json 格式的数据。&lt;/p&gt;

&lt;h2 id=&quot;爬虫方案&quot;&gt;爬虫方案&lt;/h2&gt;

&lt;p&gt;我采取的方案是每 5s 请求一次。对比前一次和这一次的区别。这里就不详细叙述了。&lt;/p&gt;

&lt;h2 id=&quot;网络请求优化及异常处理&quot;&gt;网络请求优化及异常处理&lt;/h2&gt;

&lt;p&gt;由于我的程序一开始写的不够规范，导致重复请求过多。而 instagram 对于请求频率过于高的 ip 会返回 429 错误。429 是请求次数过多。&lt;/p&gt;

&lt;p&gt;而在请求错误过多的情况下，会导致异常处理。这里我采取 try catch 的方案。&lt;/p&gt;

&lt;p&gt;在逐步优化后我的爬虫现在平均每分钟运行 12 次。已经处于不会被封的范围内了。&lt;/p&gt;

&lt;h2 id=&quot;小彩蛋&quot;&gt;小彩蛋&lt;/h2&gt;

&lt;p&gt;graphql 已经被 Instagram 采用。突然有一天的接口全部是 graphql 了。导致的就是需要重新修改 json 的解析。现在的解析还是有点复杂的。&lt;/p&gt;

&lt;h2 id=&quot;开源&quot;&gt;开源&lt;/h2&gt;

&lt;p&gt;我已经将代码开源在 https://gist.github.com/tesths/24b211eeae5acd5097e3efd647057acb。由于之前写的还有很多 try catch 的异常没有完全写进去，但是因为已经基本满足我的使用需要所以就没有继续完善。&lt;/p&gt;

</description>
        <pubDate>Mon, 09 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/linux/2018/04/09/instagram.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/linux/2018/04/09/instagram.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Heroku 安装 Huginn</title>
        <description>&lt;h2 id=&quot;需要的东西&quot;&gt;需要的东西&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeanywhere.com/&quot;&gt;Codeanywhere&lt;/a&gt; 账号注册（用于 Heroku 环境配置）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://herokuapp.com/&quot;&gt;Heroku&lt;/a&gt; 账号注册&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;部分说明&quot;&gt;部分说明&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;由于 Huginn 是基于 Ruby 的，所以需要配置 Ruby 的环境。我们这里使用 Codeanywhere，就省去了配置 Ruby 环境。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://c9.io/&quot;&gt;Cloud9&lt;/a&gt; 是一个云端的 IDE，配置好了安装 Huginn 的所有环境，但是注册需要信用卡。（如果你有信用卡我推荐你使用这个。）我们这里使用 &lt;a href=&quot;https://codeanywhere.com/&quot;&gt;Codeanywhere&lt;/a&gt;，二者没有特别大的区别，Codeanywhere 比 Cloud9 少了 Heroku 的环境，我会详细说明如何在 Codeanywhere 上配置 Heroku 的环境。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;部署步骤&quot;&gt;部署步骤&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;登陆 Huginn Github 主页的 &lt;a href=&quot;https://github.com/huginn/huginn#deployment&quot;&gt;Deployment 部分&lt;/a&gt;，找到 Heroku 的按钮。然后点击，就会跳转到你的 Heroku 了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;点完按钮之后会跳转到你的 Heroku 界面。去起个名字。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;起晚名字什么都不点，直接拉到最后点 Deploy 的按钮。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后它就会开始 build 了。等会就行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里 View 就直接到建立好的网站了，Manage App 会跳转到 Heroku 管理界面。我们点击 View。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这样就进入到网页了。这里 Huginn 很人性化的把步骤贴出来了。由于我们用的是自动安装，所以没有创建管理员用户，也有一些东西需要配置。（可以看到已经可以访问域名了）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在我们对照着 Huginn 的说明来做。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;登陆 Codeanywhere，点击右上角的 Editor。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;会进入一个选择界面，如我截图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次的话点完 Create 会让你验证邮箱，验证完邮箱对着上图再做一遍就可以了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们首先要下载新版本的 ruby 环境。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完毕后使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面的话，我写了一个脚本。这样你只需要输入很少的命令就可以了。&lt;/p&gt;

&lt;p&gt;点击文件 新建文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上 &lt;a href=&quot;https://github.com/tesths/tesths.github.com/blob/master/images/huginn/huginn.sh&quot;&gt;huginn.sh&lt;/a&gt;，复制到 Codeanywhere 的文件编辑器里。然后点击右上角保存。&lt;/p&gt;

&lt;p&gt;保存到根目录下，&lt;strong&gt;文件名保存为 huginn.sh&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在你的 Heroku 界面找到下图的地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;替换我写的脚本的以下地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后执行脚本 huginn.sh，bash 是执行的意思。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行完毕之后。&lt;/p&gt;

&lt;p&gt;先进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd code-huginn/&lt;/code&gt;（这里的 code-huginn 输入你刚替换我文件中的名字就好）。&lt;/p&gt;

&lt;p&gt;在命令行登陆你的 heroku ，就是在命令行输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku login&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;之后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku git:remote -a code-huginn&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/setup_heroku&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;剩下的就是开始自动配置了。&lt;/p&gt;

&lt;h2 id=&quot;几点说明&quot;&gt;几点说明&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Heroku 部署很简单，利用我写的脚本应该很快。&lt;/li&gt;
  &lt;li&gt;Heroku 有时间限制，有时候网站会挂，官方推荐可以使用 uptimerobot 来持续网站运行。参考官方文档。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 14 May 2017 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/huginn/2017/05/14/heroku-huginn.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/huginn/2017/05/14/heroku-huginn.html</guid>
        
        
        <category>huginn</category>
        
      </item>
    
      <item>
        <title>我的 Kindle 使用技巧</title>
        <description>&lt;p&gt;上学期买了 Kindle，于是 Kindle 就成为了我日常必备的物件…而且我觉得 Kindle 是我买过的超值的一个东西，所以有必要把我的一些使用心得写一写。&lt;/p&gt;

&lt;p&gt;首先要解释一下，当你拿到 Kindle 的时候，会需要一个亚马逊的账号，除此之外每个 Kindle 还会对应一个邮箱（邮箱名可以修改），一般是 @kindle.cn 结尾的。可以在你的 Kindle 设置里或者在亚马逊官网找到。这个邮箱的用途之大。如果你想要什么书的话，直接用邮箱发个附件到你的 Kindle 邮箱，然后 Kindle 连上网就能自动下载这本书了。还可以在主题加上 convert，这时候要发 pdf 格式的话会自动转存 Kindle 格式，不过不推荐，pdf 格式会经常转乱。&lt;/p&gt;

&lt;p&gt;还有要解释的，Kindle 的格式是 azw3 的，mobi 格式也能被 Kindle 读取，pdf 格式也可以，但是 pdf 在 Kindle 上阅读体验只差，因为字太小没法调整。如果是前两种格式的话，可以在 Kindle 中自动调整字体大小，还能重新排版，体验之好。所以如果看 pdf ，还是买一个 iPad Pro 吧。&lt;/p&gt;

&lt;p&gt;解释完了，下面强势安利几个能用得上，可以让你的 Kindle 使用效率翻上 N 翻的东西。&lt;/p&gt;

&lt;h2 id=&quot;微信公众号亚马逊kindle服务号-微信号cn_kindle&quot;&gt;微信公众号：亚马逊Kindle服务号 微信号：cn_Kindle&lt;/h2&gt;

&lt;p&gt;这是亚马逊官方的微信公众号，除了会推荐一些书之外，还组织过读书的活动。不过这个公众号最大的杀器就是，和你的专属 Kindle 邮箱绑定之后，可以将微信公众号的文章推送到你的 Kindle 上。对于我这样一个微信公众号重度使用者，是非常有用的。&lt;/p&gt;

&lt;p&gt;有时候来不及看了就直接传到 Kindle 上。具体使用就是长按你要看的公众号，选择”…“，就会有一个“亚马逊Kindle服务号的”，发送就可以了。也可以打开文章在右上角选择”…“。具体的使用方法关注之后可以自己查。&lt;/p&gt;

&lt;p&gt;除此之外，应该还可以在微信端买书之后直接推送到 Kindle，因我都是用电脑，所以还试过这个功能。&lt;/p&gt;

&lt;h2 id=&quot;微信公众号kindle电子书库-微信号kindle10000&quot;&gt;微信公众号：Kindle电子书库 微信号：kindle10000&lt;/h2&gt;

&lt;p&gt;这个其实不该安利的，但是作为 Kindle 新用户可以使用玩玩。因为这其实就是一个盗版图书的汇集地…我刚开始的时候用，最近都买正版了。所以我不会很详细的说怎么使用，需要的自己去关注就好。&lt;/p&gt;

&lt;p&gt;简单的说就是，它会用你的邮箱给你的 Kindle 邮箱发邮件。具体的绑定不难，就是利用了邮箱协议。关注之后它的说明非常之详细。&lt;/p&gt;

&lt;p&gt;这个的好处在于，你想看什么书直接在微信里输它就会帮你查找，如果确定要看，那么点击推送等一会就可以在你的 Kindle 上看到了。使用之方便是难以言表的。&lt;/p&gt;

&lt;p&gt;除此之外，还有 Kindle杂志公社，微信号：Mag10000，是一家的，可以推送一些杂志到你的 Kindle 上。&lt;/p&gt;

&lt;h2 id=&quot;kindle-特价书&quot;&gt;&lt;a href=&quot;http://t.bookdna.cn/&quot;&gt;Kindle 特价书&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个网站不知道是谁维护的，在知乎上看到之后开始变为日常每天看的网站…&lt;/p&gt;

&lt;p&gt;有两个原因推荐这个网站，一是有时候不知道想看什么书，这样逛逛会发现不少好书。二是确实便宜啊，比如我买的《中国历史那些事儿系列套装》，一共是 明朝那些事儿（全7册）、这里曾经是汉朝（全6册）、唐史并不如烟（全5册）、如果这是宋史（全10册），原价是 88.59 元，我看到特价的时候，只用了 13.99 元就入了那么多书，还是比较划算的。&lt;/p&gt;

&lt;h2 id=&quot;calibre-软件--支持-win-mac-linux&quot;&gt;calibre 软件 —— 支持 Win Mac Linux&lt;/h2&gt;

&lt;p&gt;这个软件是一个电子书管理软件，可以对电子书进行格式转换等一系列操作。还可以直接在电脑上看 azw 格式和 mobi 格式。除此之外还支持制作电子书，曾经用网上提供的 pocket 接口制作了我 pocket 里面收藏的网页放到 Kindle 上看。&lt;/p&gt;

&lt;p&gt;最近发现了 calibre 的新功能。因为在家的时候我在 Kindle 特价书 上会买好多书，想给我妈还有奶奶都搞一份，毕竟他们也算是出了钱的…但是亚马逊官方对于购买的书籍都加了 DRM 保护，不能在购买者之外的 Kindle 设备上看。这里不具体一步一步说怎么去除 DRM 保护了，用到的工具 &lt;a href=&quot;https://github.com/apprenticeharper/DeDRM_tools&quot;&gt;DeDRM_tools&lt;/a&gt;，可以安装 calibre 插件，然后将 azw 格式转化为 mobi 格式就可以在其他设备上看了。&lt;/p&gt;

&lt;h2 id=&quot;push-to-kindle--chrome-插件&quot;&gt;&lt;a href=&quot;http://fivefilters.org/kindle-it/&quot;&gt;Push to Kindle&lt;/a&gt; —— Chrome 插件&lt;/h2&gt;

&lt;p&gt;这个软件是有 Chrome 插件的，绑定邮箱之后可以直接将网页推送到 Kindle 上看。解决了 Pocket 上面的东西想推送到 Kindle 的问题。&lt;/p&gt;

&lt;p&gt;但是如果就这么点功能未免太什么了。Push to Kindle 个人觉得最厉害的是提供了可以编辑的格式。它在抓取网页之后会显示一个 Preview，如图。如果你对排版不满意，可以点击 &lt;a href=&quot;http://pastepad.fivefilters.org/&quot;&gt;pastepad&lt;/a&gt;，进入之后，把你想看的网页内容复制进来，对其中的格式进行排版再推送到 Kindle 上，几乎完美解决了不同网页在 Kindle 上阅读体验的问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kindle.jpeg&quot; alt=&quot;kindle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你还可以用 &lt;a href=&quot;http://pastepad.fivefilters.org/&quot;&gt;pastepad&lt;/a&gt; 制作 PDF 和 EPUB。里面的内容当然是想是什么就是什么了。我曾经还放过代码，然后推送到 Kindle 上…十分不建议用 Kindle 看代码。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;p&gt;如果你想在 Kindle 上看一些 RSS，可以上&lt;a href=&quot;https://www.dogear.cn/&quot;&gt;狗耳朵&lt;/a&gt;，里面提供了很多网站的 RSS，每天定点推送到 Kindle 上，非常方便。&lt;/p&gt;

&lt;p&gt;Kindle 自带了查词功能，中英文都有。长按就可以了。&lt;/p&gt;

&lt;p&gt;除此之外 Kindle 还可以制作剪切板，看到好的句子可以直接记录在剪切板中，可以用电脑拷出来。具体方法可以网上查一查。&lt;/p&gt;

&lt;p&gt;据说现在 Kindle 还支持微信分享了，没有用过。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;感谢很多人在知乎以及其他网站上分享了很多 Kindle 的使用技巧，我只是针对我自己进行了一些选择，网上还有很多其他的，可以没事查一查。&lt;/p&gt;

&lt;p&gt;Kindle 给我的改变比较大，上学期看了好多书，很多玩手机的时间都看书了，感觉还是学到了不少东西的，看书心里愧疚感也会减少。&lt;/p&gt;

&lt;p&gt;俗话说得好。&lt;/p&gt;

&lt;p&gt;“平板穷三代，Kindle 富一生。”&lt;/p&gt;

&lt;p&gt;愿买了 Kindle 的你可以重新爱上读书。&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/life/2016/09/06/kindle.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/life/2016/09/06/kindle.html</guid>
        
        
        <category>life</category>
        
      </item>
    
  </channel>
</rss>
