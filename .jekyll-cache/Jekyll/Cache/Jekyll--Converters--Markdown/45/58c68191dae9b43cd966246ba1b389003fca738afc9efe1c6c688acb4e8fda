I"je<h2 id="for-cm-and-plusub">FOR CM AND PLUSUB</h2>

<blockquote>
  <p>好久没写博客了。之前一直在研究MVVM这种新的开发模式。也算是沉淀了一段时间，国庆期间可能还会写写MVVM。今天要聊的是创萌工作室的iOS客户端网络请求的封装。因为很多原因封装的还不够好存在很多问题今天写出来只是想把最近做的事情写出来作个记录。</p>
</blockquote>

<p>我写这篇文章已经做好了被喷死吐槽死的准备了，因为我感觉我封装的太有问题了，但是又真的很想写一写，毕竟对我来说确实解决了一个大问题。</p>

<p>另外:链接不知道为啥都不变色了😭基本上我都给链接了，就凑合一下吧…</p>

<h2 id="先简单的说说我们的网络请求转变过程">先简单的说说我们的网络请求转变过程</h2>

<p>加入工作室一年。一共做了有三四个项目了。我先大概叙述一下我们的网络请求的转变过程</p>

<h2 id="第一阶段-直接调用afnetworking"><code class="language-plaintext highlighter-rouge">第一阶段 直接调用AFNetworking</code></h2>

<p>第一个项目那时候懵懂无知，每个界面都直接调<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>。这样导致的问题就是代码量骤然增加。</p>

<h2 id="第二阶段-直接调用ytknetwork"><code class="language-plaintext highlighter-rouge">第二阶段 直接调用YTKNetwork</code></h2>

<p>第二个项目刚做的时候唐巧开源了他们在猿题库封装的<a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a>。那时候还是懵懂无知，还是在每个界面都开始直接调YTKNetwork。人家封装的那么好的东西就被我用成这个栽子，简直对不起巧大。我记得有个界面好像有5条网络请求，可以想象代码的冗余度。</p>

<h2 id="第三阶段-开始使用reactivecocoa"><code class="language-plaintext highlighter-rouge">第三阶段 开始使用ReactiveCocoa</code></h2>

<p>因为在做第二个项目的时候我和迪哥负责不同的客户端。迪哥在看了limboy的<a href="http://limboy.me/ios/2014/01/05/ios-rest-client-implementation.html">基于AFNetworking2.0和ReactiveCocoa2.1的iOS REST Client</a>开始将网络请求剥离到一个专门的界面，这样每次就不用写很多的东西了。</p>

<p>limboy用了<a href="https://github.com/CodaFi/AFNetworking-RACExtensions">AFNetworking-RACExtensions</a>来实现回调的效果。简单的说就是subscribe一个信号，然后信号会返回一个信号回来，这样就实现了将网络请求部分剥离的效果。</p>

<p>我在第二个项目基本上结束的时候上线了一个自己独立开发的app，里面就是用了这样的方法。</p>

<p>这学期在做项目的时候还是在沿用迪哥的代码，但是我发现了很多问题。</p>

<p>一是limboy在写rac代码的时候用的concat无法完成网络请求再请求。简单的说，服务器在返回告诉我session失效的时候我先需要后台自动登录然后再次网络请求。我再写的时候concat无法实现再次网络请求，我也不太明白为什么，试了各种方法都不行。这是很困惑我的我后面还需要再次研究一下。</p>

<p>二是再判断服务器返回的东西的时候，需要判断状态码。如果成功，那么会有json数据返回回来，如果失败则没有数据。出现这样的情况如果我在Acontroller调Bcontroller的网络请求则还需要判断是不是返回了一个数组或者对象，如果是，开始对数据进行处理，如果不是，还得重新进行网络请求，因为说明session失效了。</p>

<p>这样还是导致了网络请求部分有大量的代码。</p>

<h2 id="根据coding的ios重新封装网络请求">根据Coding的iOS重新封装网络请求</h2>

<p><a href="https://coding.net/u/ease/p/Coding_iOS/git">Coding的iOS客户端</a>是开源的，在Github和Coding官网都有。我放的链接是一个下载下来就能跑起来的。(强迫症，跑不起来的代码都不想看..不过现在看MVVM好多都跑不起来也硬着头皮看了)</p>

<p>Coding的网络请求自己看了。Coding是用block来进行回调的。至于这一块选择notice还是block还是delegate，可以参考<a href="http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html">iOS应用架构谈 网络层设计方案</a>我算是认真看了，但是不是很能写的出来…</p>

<blockquote>
  <p>插一句话，我们为什么不用block。因为迪哥也不太会block就直接上rac了，我之前的博客写过简单的block，我在写代码的时候用delegate和notice比较多所以对block的实践比较少。这是我自身的问题。而且说实话我觉得用rac挺好的，因为block加上typedef啥的其实很多东西的，不像rac直接调就完事了。</p>
</blockquote>

<h2 id="下面开始今天的算是干货的东西">下面开始今天的算是干货的东西</h2>

<h2 id="1-分析coding网络请求">1. 分析Coding网络请求</h2>

<h3 id="coding的网络请求我觉得可以总结为"><em>Coding的网络请求我觉得可以总结为</em></h3>

<h3 id="block---block---afnetworking">block -&gt; block -&gt; AFNetworking</h3>

<p>下面来解释一下，首先第一个block是我们的主viewcontroller，也就是我们逻辑部分和视图部分。首先第一个block调Coding_NetAPIManager里的函数。然后在Coding_NetAPIManager再调CodingNetAPIClient里的函数。</p>

<h3 id="具体coding代码请看coding客户端代码的链接">(具体Coding代码请看<a href="https://coding.net/u/ease/p/Coding_iOS/git">Coding客户端</a>代码的链接)</h3>

<p>我们倒着来说。</p>

<h2 id="第三部分-afnetworking"><code class="language-plaintext highlighter-rouge">第三部分 AFNetworking</code></h2>

<p>在我分类的AFNetworking里也就是CodingNetAPIClient里，Coding进行了一件事情，那就是进行AFNetworking的网络请求。</p>

<p>在获取到数据的时候的对reponse进行一个判断。在判断数据的时候，如果数据有错误，则直接显示错误的msg，如果没有错误，那么则不返回任何东西。</p>

<p>然后在网络请求中判断，如果有错误，那么返回nil和id类型的error。如果没错误，返回response和nil。</p>

<h2 id="第二部分-block"><code class="language-plaintext highlighter-rouge">第二部分 block</code></h2>

<p>在这部分里，回调的结果有两种，一种是有数据，一种是没数据。其实到这就行了。那么现在在这第二个部分干什么呢，json转model。就这么简单。返回的东西，如果有数据返回，那么就再次返回model或者是data和nil，如果没有数据返回，就返回nil和error。</p>

<h2 id="第一部分-block"><code class="language-plaintext highlighter-rouge">第一部分 block</code></h2>
<p>到这里，其实只要判断有无数据就可以啦。</p>

<p>好了。下面我们只需要用RAC来替换block就完成了。当然了，中间有坑，不会那么简单的…</p>

<h2 id="2-改写网络请求">2. 改写网络请求</h2>

<p>我要上代码了。依然三部分。我们还是倒着来。我放关键的代码在这。</p>

<p>既然我把Coding的代码分成了</p>

<h3 id="block---block---afnetworking-1">block -&gt; block -&gt; AFNetworking</h3>

<p>那么我的基本上就可以说是</p>

<h3 id="rac---rac---afnetworking">RAC -&gt; RAC -&gt; AFNetworking</h3>

<p>也是倒着来。</p>

<h2 id="第三部分-afnetworking-1"><code class="language-plaintext highlighter-rouge">第三部分 AFNetworking</code></h2>
<p><code class="language-plaintext highlighter-rouge">这是AFNetworking网络请求</code></p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"> 
<span class="c1">//一切仿照Coding</span>
<span class="k">case</span> <span class="n">Get</span><span class="p">:{</span>
    <span class="k">return</span> <span class="p">[[[[</span><span class="n">self</span> <span class="nf">rac_GET</span><span class="p">:</span><span class="n">aPath</span> <span class="nf">parameters</span><span class="p">:</span><span class="nf">params</span><span class="p">]</span> <span class="nf">map</span><span class="p">:</span><span class="o">^</span><span class="n">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">JSONAndHeaders</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">responseObject</span> <span class="o">=</span> <span class="n">JSONAndHeaders</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="n">DebugLog</span><span class="p">(</span><span class="s">@"</span><span class="se">\n</span><span class="s">===========response===========</span><span class="se">\n</span><span class="s">%@:</span><span class="se">\n</span><span class="s">%@"</span><span class="p">,</span> <span class="n">aPath</span><span class="p">,</span> <span class="n">responseObject</span><span class="p">);</span>
<span class="c1">//这里调用下一个部分的函数</span>
        <span class="n">id</span> <span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nf">handleResponse</span><span class="p">:</span><span class="n">responseObject</span> <span class="nf">autoShowError</span><span class="p">:</span><span class="n">autoShowError</span> <span class="n">rerequestJsonDataWithPath</span><span class="o">:</span><span class="n">aPath</span> <span class="n">withParams</span><span class="o">:</span><span class="n">params</span> <span class="n">withMethodType</span><span class="o">:</span><span class="n">method</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="n">responseObject</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}]</span>
             <span class="nl">catch:</span><span class="o">^</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
                 <span class="n">DebugLog</span><span class="p">(</span><span class="s">@"</span><span class="se">\n</span><span class="s">===========response===========</span><span class="se">\n</span><span class="s">%@:</span><span class="se">\n</span><span class="s">%@"</span><span class="p">,</span> <span class="n">aPath</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
                 <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nf">showError</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
             <span class="p">}]</span> <span class="n">replayLazily</span><span class="p">];</span>
    <span class="k">break</span><span class="p">;</span>
<span class="err">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">这是对返回值的处理</code></p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"> 
        <span class="k">-</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="nf">handleResponse</span><span class="p">:(</span><span class="n">id</span><span class="p">)</span><span class="nv">responseJSON</span> <span class="nf">autoShowError</span><span class="p">:(</span><span class="n">BOOL</span><span class="p">)</span><span class="nv">autoShowError</span>
<span class="nf">rerequestJsonDataWithPath</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aPath</span>
         <span class="nf">withParams</span><span class="p">:(</span><span class="n">NSDictionary</span><span class="o">*</span><span class="p">)</span><span class="nv">params</span>
     <span class="nf">withMethodType</span><span class="p">:(</span><span class="n">NetworkMethod</span><span class="p">)</span><span class="nv">method</span><span class="p">{</span>
    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="n">NSNumber</span> <span class="o">*</span><span class="n">resultCode</span> <span class="o">=</span> <span class="p">[</span><span class="n">responseJSON</span> <span class="nf">valueForKeyPath</span><span class="p">:</span><span class="s">@"status"</span><span class="p">];</span>
    
    <span class="c1">//如果服务器返回的值不是正确有数值的话</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">resultCode</span><span class="p">.</span><span class="n">intValue</span> <span class="o">!=</span> <span class="n">VALUE</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSError</span> <span class="nf">errorWithDomain</span><span class="p">:</span><span class="n">BASE_URL</span> <span class="nf">code</span><span class="p">:</span><span class="n">resultCode</span><span class="p">.</span><span class="n">intValue</span> <span class="n">userInfo</span><span class="o">:</span><span class="n">responseJSON</span><span class="p">];</span>
        <span class="c1">//如果服务器返回session失效的错误码</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">resultCode</span><span class="p">.</span><span class="n">intValue</span> <span class="o">==</span> <span class="n">VALUE</span><span class="p">)</span> <span class="p">{</span><span class="c1">//用户未登录</span>
            <span class="p">[[[</span><span class="n">NetWork</span> <span class="nf">sharedManager</span><span class="p">]</span> <span class="nf">login</span><span class="p">]</span> <span class="nf">subscribeNext</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">RACTupleUnpack</span><span class="p">(</span><span class="n">id</span> <span class="n">data</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
                <span class="c1">//由于没登陆那么这里调用第二个部分RAC的登陆方法，进行重新登陆</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//这时有数据返回则再次发出网络请求</span>
                    <span class="p">[</span><span class="n">self</span> <span class="nf">rerequestJsonDataWithPath</span><span class="p">:</span><span class="n">aPath</span> <span class="nf">withParams</span><span class="p">:</span><span class="n">params</span> <span class="n">withMethodType</span><span class="o">:</span><span class="n">method</span><span class="p">];</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    
                <span class="p">}</span>
            <span class="p">}];</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">autoShowError</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">[</span><span class="n">self</span> <span class="nf">showError</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">这是重新登陆后再次进行网络请求</code></p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"> 
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">rerequestJsonDataWithPath</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aPath</span>
                      <span class="nf">withParams</span><span class="p">:(</span><span class="n">NSDictionary</span><span class="o">*</span><span class="p">)</span><span class="nv">params</span>
                  <span class="nf">withMethodType</span><span class="p">:(</span><span class="n">NetworkMethod</span><span class="p">)</span><span class="nv">method</span>
<span class="p">{</span>
    <span class="p">[[[</span><span class="n">NetWorkCheck</span> <span class="nf">sharedJsonClient</span><span class="p">]</span> <span class="nf">requestJsonDataWithPath</span><span class="p">:</span><span class="n">aPath</span> <span class="nf">withParams</span><span class="p">:</span><span class="n">params</span> <span class="nf">withMethodType</span><span class="p">:</span><span class="n">Get</span><span class="p">]</span> <span class="n">subscribeNext</span><span class="o">:^</span><span class="p">(</span><span class="n">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"success"</span><span class="p">);</span>
    <span class="p">}];</span>
<span class="p">}</span></code></pre></figure>

<h2 id="第二部分-rac"><code class="language-plaintext highlighter-rouge">第二部分 RAC</code></h2>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"> 
<span class="k">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="n">test2</span>
<span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="s">@"/MyList.do"</span><span class="p">;</span>
    
    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">@{</span><span class="s">@"id"</span><span class="o">:</span><span class="s">@"22"</span><span class="p">};</span>
    
    <span class="k">return</span> <span class="p">[[[</span><span class="n">NetWorkCheck</span> <span class="nf">sharedJsonClient</span><span class="p">]</span> <span class="nf">requestJsonDataWithPath</span><span class="p">:</span><span class="n">path</span> <span class="nf">withParams</span><span class="p">:</span><span class="n">params</span> <span class="nf">withMethodType</span><span class="p">:</span><span class="n">Get</span><span class="p">]</span> <span class="n">map</span><span class="o">:^</span><span class="n">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">RACTupleUnpack</span><span class="p">(</span><span class="n">id</span> <span class="n">resultData</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">resultData</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="n">resultData</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}];</span>
<span class="p">}</span></code></pre></figure>

<h2 id="第一部分-rac"><code class="language-plaintext highlighter-rouge">第一部分 RAC</code></h2>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"> 
<span class="k">-</span> <span class="p">(</span><span class="n">IBAction</span><span class="p">)</span><span class="nf">test2</span><span class="p">:(</span><span class="n">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="p">[[[</span><span class="n">NetWork</span> <span class="nf">sharedManager</span><span class="p">]</span> <span class="nf">test2</span><span class="p">]</span> <span class="nf">subscribeNext</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">RACTupleUnpack</span><span class="p">(</span><span class="n">id</span> <span class="n">data</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
            
        <span class="p">}</span>
    <span class="p">}];</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>看代码的时候最好是从第一部分看，我为了突出重点所以把第三部分放到最前面了。基本上我就干了一件事情，把block改写为RAC。</p>
</blockquote>

<h2 id="3-问题以及填坑">3. 问题以及填坑</h2>

<h3 id="问题一回调两个值">问题一：回调两个值</h3>

<p>其实用RAC改写block是不难的，难的在于block传值传了两个回去，RAC我没找到可以传两个值的地方，于是我用了RACTuplePack，这个是RAC里一个宏定义，可以打包变量。然后在信号收取端利用<code class="language-plaintext highlighter-rouge">RACTupleUnpack(id resultData, NSError *error) = x;</code>来解加压缩变量(用词不准确见谅)</p>

<p>在这里非常感谢<a href="supermao.cn/zhe-yang-hao-yong-de-reactivecocoagen-ben-ting-bu-xia-lai/">这样好用的ReactiveCocoa，根本停不下来</a>这篇博客。看到了RACTuplePack这个宏定义。</p>

<h3 id="问题二如何在服务器返回session失效之后进行两次链接请求一次后台自动登录一次重新进行网络请求">问题二：如何在服务器返回session失效之后进行两次链接请求，一次后台自动登录，一次重新进行网络请求</h3>

<p>在Coding的代码里，我看到如果未登录是会弹出登录界面。但是我们要求是后台登录然后重新请求。</p>

<p>我开始是想在get请求那部分直接在此调get的网络请求。但是不会执行两次网络请求。</p>

<p>之前的项目是在vc的界面判断没数据则在此调用函数。如果那样的话我不是白封装半天了…于是决定封装到network里，我就在重新登录后判断有无数据，有数据则意味着登录成功，登录成功，在此调一个登录的函数。</p>

<p>虽然这样看上去就不合理，但是是我能尝试出来的一个办法了…尝试了好几天，查了半天也没有类似的解决方案。</p>

<h3 id="问题三为什么有时候不会执行网络请求">问题三：为什么有时候不会执行网络请求</h3>

<p>我在解决问题二的时候就出现这种问题，不能进行网络请求，我只是一个简单的调函数。但是，但是，但是，在rac里必须要subscribeNext，如果不subscribeNext则不会调！这是需要记住的。</p>

<h2 id="4-还存在的问题以及不足">4. 还存在的问题以及不足</h2>

<ol>
  <li>
    <p>Coding对于Get请求还做了缓存，我没做。后面会慢慢加上。</p>
  </li>
  <li>
    <p>RAC是对于很多东西的一个大集合，比如block比如KVO等等。所以需要对iOS的内存管理机制进行一个深入理解，这是我一直所欠缺的。这个问题在我解决问题二的时候出现了好几次报错，都是这个问题。但是我却无法解决。</p>
  </li>
  <li>
    <p>Coding中还用到了很多显示错误的MBProgress等等，我在此都没写，如果想仔细研究去看Coding的源码。</p>
  </li>
  <li>
    <p>Coding的网络请求还有很多对文件的处理，post请求等等，我现在只改写了Get和Post请求。后面需要把Coding这一套都好好的研究一下。</p>
  </li>
  <li>
    <p>对于RAC的理解还是不够，在整个过程中遇到很多问题。</p>
  </li>
</ol>

<blockquote>
  <h2 id="最后的最后感谢coding将他们的客户端开源出来感谢为coding贡献代码的工程师是你们让我学到了更多的东西">最后的最后感谢Coding将他们的客户端开源出来，感谢为Coding贡献代码的工程师。是你们让我学到了更多的东西😘</h2>
</blockquote>
:ET